namespace codingame.dont.panic
{
	using System.Collections.Generic;
	using System.Linq;
	using TurnDecision;

	public class CloneMaster
	{
		private readonly bool[] _blockedClonesPerFloor;
		private readonly IEnumerable<TurnDecisionBase> _turnDecisions;

		public CloneMaster(DriveParams driveParams, TurnDecisionsFactory turnDecisionsFactory)
		{
			_blockedClonesPerFloor = new bool[driveParams.FloorCount];
			_turnDecisions = turnDecisionsFactory.Create();
		}

		public TurnDecision.TurnDecision Decide(TurnParams turnParams)
		{
			return _turnDecisions
				.First(td => td.CanDecide(turnParams, _blockedClonesPerFloor))
				.Decide(turnParams, _blockedClonesPerFloor);
		}
	}
}

namespace codingame.dont.panic
{
	public enum Direction
	{
		LEFT,
		RIGHT,
		EXIT
	}
}

namespace codingame.dont.panic
{
	using System;
	using TurnDecision;

	public class Drive
	{
		private readonly Func<string> _readLine;
		private readonly Action<object> _writeLine;

		public Drive(Func<string> readLine, Action<object> writeLine)
		{
			_readLine = readLine;
			_writeLine = writeLine;
		}

		public void Run()
		{
			var driveParams = new DriveParams(_readLine);
			var drive = new CloneMaster(driveParams, new TurnDecisionsFactory(driveParams));

			// game loop
			while (true)
			{
				var turnParams = new TurnParams(_readLine(), driveParams);
				if (turnParams.CloneDirection == Direction.EXIT)
				{
					break;
				}

				var decision = drive.Decide(turnParams);
				_writeLine(decision); // action: WAIT or BLOCK
			}
		}
	}
}

namespace codingame.dont.panic
{
	using System;
	using System.Collections.Generic;

	public class DriveParams
	{
		private readonly List<Elevator> _elevators = new List<Elevator>();

		public int FloorCount { get; }

		public int DriveWidth { get; }

		public int MaximumRoundCount { get; private set; }

		public int ExitFloor { get; }

		public int ExitPosition { get; }

		public int TotalClonesCount { get; private set; }

		public int AdditionalElevatorsCount { get; private set; }

		public IEnumerable<Elevator> Elevators => _elevators;

		public DriveParams(Func<string> readLine)
		{
			var inputs = readLine().Split(' ');
			FloorCount = int.Parse(inputs[0]); // number of floors
			DriveWidth = int.Parse(inputs[1]); // width of the area
			MaximumRoundCount = int.Parse(inputs[2]); // maximum number of rounds
			ExitFloor = int.Parse(inputs[3]); // floor on which the exit is found
			ExitPosition = int.Parse(inputs[4]); // position of the exit on its floor
			TotalClonesCount = int.Parse(inputs[5]); // number of generated clones
			AdditionalElevatorsCount = int.Parse(inputs[6]); // number of additional elevators ignore (always zero)
			var nbElevators = int.Parse(inputs[7]); // number of elevators
			for (var i = 0; i < nbElevators; i++)
			{
				_elevators.Add(new Elevator(readLine()));
			}
		}
	}
}

namespace codingame.dont.panic
{
	public class Elevator
	{
		public Elevator(string readLine)
		{
			var elevatorInputs = readLine.Split(' ');
			Floor = int.Parse(elevatorInputs[0]);
			Position = int.Parse(elevatorInputs[1]);
		}

		public int Floor { get; }

		public int Position { get; }
	}
}

namespace codingame.dont.panic
{
	using System;

	public class Program
	{
		public static void Main(string[] args)
		{
			var drive = new Drive(Console.ReadLine, Console.WriteLine);
			drive.Run();
		}
	}
}


namespace codingame.dont.panic
{
	using System;
	using System.Linq;

	public class TurnParams
	{
		private readonly DriveParams _driveParams;

		public int CloneFloor { get; }

		public int ClonePosition { get; }

		public Direction CloneDirection { get; }

		public TurnParams(string readLineParams, DriveParams driveParams)
		{
			_driveParams = driveParams;
			var inputs = readLineParams.Split(' ');
			// floor of the leading clone
			CloneFloor = int.Parse(inputs[0]);
			// position of the leading clone on its floor
			ClonePosition = int.Parse(inputs[1]);
			// referenceDirection of the leading clone: LEFT or RIGHT
			CloneDirection = (Direction)Enum.Parse(typeof(Direction), inputs[2]);
		}

		public bool IsLeftColision()
		{
			return ClonePosition == 0 && CloneDirection == Direction.LEFT;
		}

		public bool IsRightColision()
		{
			return ClonePosition + 1 == _driveParams.DriveWidth && CloneDirection == Direction.RIGHT;
		}

		public bool IsCloneOnExitFloor()
		{
			return CloneFloor == _driveParams.ExitFloor;
		}

		private int GetObjectivePosition()
		{
			return _driveParams.ExitFloor == CloneFloor
				? _driveParams.ExitPosition
				: _driveParams.Elevators.First(e => e.Floor == CloneFloor).Position;
		}

		public bool ShouldCloneReverse(Direction referenceDirection)
		{
			if (CloneDirection != referenceDirection)
			{
				return false;
			}

			var objectivePosition = GetObjectivePosition();
			if (referenceDirection == Direction.RIGHT)
			{
				return ClonePosition > objectivePosition;
			}

			return ClonePosition < objectivePosition;
		}

		private Elevator GetPreviousFloorElevator()
		{
			return _driveParams.Elevators.FirstOrDefault(e => e.Floor == CloneFloor - 1);
		}

		public bool IsCloneNearPreviousElevator(Direction referenceDirection)
		{
			var previousFloorElevatorPosition = GetPreviousFloorElevator()?.Position;
			if (referenceDirection == Direction.LEFT)
			{
				return previousFloorElevatorPosition - 1 == ClonePosition;
			}

			return previousFloorElevatorPosition + 1 == ClonePosition;
		}
	}
}







namespace codingame.dont.panic.TurnDecision
{
	public class BlockCloneBeforeColision : TurnDecisionBase
	{
		public BlockCloneBeforeColision(DriveParams driveParams) : base(driveParams)
		{
		}

		public override bool CanDecide(TurnParams turnParams, bool[] blockedClonesPerFloor)
		{
			return turnParams.IsLeftColision() || turnParams.IsRightColision();
		}

		public override TurnDecision Decide(TurnParams turnParams, bool[] blockedClonesPerFloor)
		{
			return IncrementBlockedClonesPerFloorAndBlock(turnParams, blockedClonesPerFloor);
		}
	}
}

namespace codingame.dont.panic.TurnDecision
{
	public class BlockCloneIfGoingLeftAndElevatorIsOnRight : TurnDecisionBase
	{
		public BlockCloneIfGoingLeftAndElevatorIsOnRight(DriveParams driveParams) : base(driveParams)
		{
		}

		public override bool CanDecide(TurnParams turnParams, bool[] blockedClonesPerFloor)
		{
			return turnParams.ShouldCloneReverse(Direction.LEFT)
			       && turnParams.IsCloneNearPreviousElevator(Direction.LEFT)
			       && Are0ClonesBlockedOnFloor(turnParams, blockedClonesPerFloor);
		}

		public override TurnDecision Decide(TurnParams turnParams, bool[] blockedClonesPerFloor)
		{
			return IncrementBlockedClonesPerFloorAndBlock(turnParams, blockedClonesPerFloor);
		}
	}
}

namespace codingame.dont.panic.TurnDecision
{
	public class BlockCloneIfGoingLeftAndExitIsOnRight : TurnDecisionBase
	{
		public BlockCloneIfGoingLeftAndExitIsOnRight(DriveParams driveParams) : base(driveParams)
		{
		}

		public override bool CanDecide(TurnParams turnParams, bool[] blockedClonesPerFloor)
		{
			return turnParams.ShouldCloneReverse(Direction.LEFT)
			       && turnParams.IsCloneOnExitFloor()
				   && turnParams.IsCloneNearPreviousElevator(Direction.LEFT)
			       && Are0ClonesBlockedOnFloor(turnParams, blockedClonesPerFloor);
		}

		public override TurnDecision Decide(TurnParams turnParams, bool[] blockedClonesPerFloor)
		{
			return IncrementBlockedClonesPerFloorAndBlock(turnParams, blockedClonesPerFloor);
		}
	}
}

namespace codingame.dont.panic.TurnDecision
{
	public class BlockCloneIfGoingRightAndElevatorIsOnLeft : TurnDecisionBase
	{
		public BlockCloneIfGoingRightAndElevatorIsOnLeft(DriveParams driveParams) : base(driveParams)
		{
		}

		public override bool CanDecide(TurnParams turnParams, bool[] blockedClonesPerFloor)
		{
			return turnParams.ShouldCloneReverse(Direction.RIGHT)
			       && turnParams.IsCloneNearPreviousElevator(Direction.RIGHT)
			       && Are0ClonesBlockedOnFloor(turnParams, blockedClonesPerFloor);
		}

		public override TurnDecision Decide(TurnParams turnParams, bool[] blockedClonesPerFloor)
		{
			return IncrementBlockedClonesPerFloorAndBlock(turnParams, blockedClonesPerFloor);
		}
	}
}

namespace codingame.dont.panic.TurnDecision
{
	public class BlockCloneIfGoingRightAndExitIsOnLeft : TurnDecisionBase
	{
		public BlockCloneIfGoingRightAndExitIsOnLeft(DriveParams driveParams) : base(driveParams)
		{
		}

		public override bool CanDecide(TurnParams turnParams, bool[] blockedClonesPerFloor)
		{
			return turnParams.ShouldCloneReverse(Direction.RIGHT)
			       && turnParams.IsCloneOnExitFloor()
				   && turnParams.IsCloneNearPreviousElevator(Direction.RIGHT)
			       && Are0ClonesBlockedOnFloor(turnParams, blockedClonesPerFloor);
		}

		public override TurnDecision Decide(TurnParams turnParams, bool[] blockedClonesPerFloor)
		{
			return IncrementBlockedClonesPerFloorAndBlock(turnParams, blockedClonesPerFloor);
		}
	}
}

namespace codingame.dont.panic.TurnDecision
{
	public enum TurnDecision
	{
		WAIT,
		BLOCK
	}
}

namespace codingame.dont.panic.TurnDecision
{
	using System.Linq;

	public abstract class TurnDecisionBase
	{
		private readonly DriveParams _driveParams;

		protected TurnDecisionBase(DriveParams driveParams)
		{
			_driveParams = driveParams;
		}

		public abstract bool CanDecide(TurnParams turnParams, bool[] blockedClonesPerFloor);

		public abstract TurnDecision Decide(TurnParams turnParams, bool[] blockedClonesPerFloor);

		protected static TurnDecision IncrementBlockedClonesPerFloorAndBlock(TurnParams turnParams, bool[] blockedClonesPerFloor)
		{
			blockedClonesPerFloor[turnParams.CloneFloor] = true;
			return TurnDecision.BLOCK;
		}

		protected static bool Are0ClonesBlockedOnFloor(TurnParams turnParams, bool[] blockedClonesPerFloor)
		{
			return !blockedClonesPerFloor[turnParams.CloneFloor];
		}
	}
}

namespace codingame.dont.panic.TurnDecision
{
	using System.Collections.Generic;

	public class TurnDecisionsFactory
	{
		private readonly DriveParams _driveParams;

		public TurnDecisionsFactory(DriveParams driveParams)
		{
			_driveParams = driveParams;
		}

		public IEnumerable<TurnDecisionBase> Create()
		{
			yield return new BlockCloneBeforeColision(_driveParams);
			yield return new BlockCloneIfGoingLeftAndElevatorIsOnRight(_driveParams);
			yield return new BlockCloneIfGoingLeftAndExitIsOnRight(_driveParams);
			yield return new BlockCloneIfGoingRightAndElevatorIsOnLeft(_driveParams);
			yield return new BlockCloneIfGoingRightAndExitIsOnLeft(_driveParams);
			yield return new Wait(_driveParams);
		}
	}
}

namespace codingame.dont.panic.TurnDecision
{
	public class Wait : TurnDecisionBase
	{
		public Wait(DriveParams driveParams) : base(driveParams)
		{
		}

		public override bool CanDecide(TurnParams turnParams, bool[] blockedClonesPerFloor)
		{
			return true;
		}

		public override TurnDecision Decide(TurnParams turnParams, bool[] blockedClonesPerFloor)
		{
			return TurnDecision.WAIT;
		}
	}
}

